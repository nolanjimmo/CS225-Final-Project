module Interpreter where

import qualified DataTypes as DT

import Data.Map (Map)
import qualified Data.Map as Map

interpDT :: DT.Expr -> DT.Env -> Maybe(DT.Value, DT.Env)
interpDT e env = case e of
 DT.IntE i -> Just(DT.IntV i, env)
 DT.PlusE e1 e2 -> case (e1, e2) of
    (DT.IntE i1, DT.IntE i2) -> Just(DT.IntV ( i1 + i2), env)
 DT.TimesE e1 e2 -> case (e1, e2) of
    (DT.IntE i1, DT.IntE i2) -> Just(DT.IntV (i1 * i2), env)
 DT.BoolE b -> Just(DT.BoolV b, env)
 DT.OrE e1 e2 -> case (interpDT e1 env) of
    Just(DT.BoolV(true), env) -> Just(DT.BoolV true, env)
    _ -> case (interpDT e2 env) of
       Just(DT.BoolV(true), env) -> Just(DT.BoolV True, env)
       _ -> Just(DT.BoolV False, env)
 DT.IfE e1 e2 e3 -> case (interpDT e1 env) of
    Just(DT.BoolV true, env) -> interpDT e2 env
    _ -> interpDT e3 env
 DT.NegE e -> case (interpDT e env) of
    Just(DT.IntV i, env) -> Just(DT.IntV (-i), env)
    Just(DT.BoolV b, env) -> if b == True
                             then Just(DT.BoolV False, env)
                             else Just(DT.BoolV True, env)
    _ -> Nothing
 DT.LetE x e1 e2 -> case interpDT e1 env of
    Just(v, env) -> interpDT e2 (Map.insert x v env)
 DT.VarE x -> case Map.lookup x env of
    Just v -> Just(v, env)
 DT.PairE (e1,e2) -> case ((interpDT e1 env), (interpDT e2 env)) of
    ((Just(v1, env1)),(Just(v2, env2))) -> Just(DT.PairV(v1, v2), env)
 DT.Fst e -> interpDT e env
 DT.Snd e -> interpDT e env
 DT.CaseE e x1 e1 x2 e2 -> case interpDT e env of
    Just(DT.LeftV v, env1) -> interpDT e1 (Map.insert x1 v env)
    Just(DT.RightV v, env1) -> interpDT e2 (Map.insert x2 v env)
 DT.Right e -> case interpDT e env of
    Just(v, env1) -> Just(DT.RightV v, env)
 DT.Left e -> case interpDT e env of
    Just(v, env1) -> Just(DT.LeftV v, env)



testThisInterpreter :: Test
testThisInterpreter = TestDir
  ("Testing"
  , "interpDT"
  , interpDT
  , "testsFP"
  )

main :: IO ()
main = runTests
  [testThisInterpreter] 
